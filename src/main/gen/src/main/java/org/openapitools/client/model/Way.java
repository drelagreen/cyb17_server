/*
 * Railway Station API
 * API for managing railway stations, parks, ways, locomotives, and wagons.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Locomotive;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Way
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-23T05:23:19.175324+03:00[Europe/Moscow]")
public class Way {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PARK_ID = "parkId";
  @SerializedName(SERIALIZED_NAME_PARK_ID)
  private Integer parkId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LOCOMOTIVES = "locomotives";
  @SerializedName(SERIALIZED_NAME_LOCOMOTIVES)
  private List<Locomotive> locomotives = null;

  public static final String SERIALIZED_NAME_WAGONS_COUNT = "wagonsCount";
  @SerializedName(SERIALIZED_NAME_WAGONS_COUNT)
  private Integer wagonsCount;

  public static final String SERIALIZED_NAME_WAGONS_IDS = "wagonsIds";
  @SerializedName(SERIALIZED_NAME_WAGONS_IDS)
  private List<Integer> wagonsIds = null;

  public static final String SERIALIZED_NAME_MAX_CARRIAGES_COUNT = "maxCarriagesCount";
  @SerializedName(SERIALIZED_NAME_MAX_CARRIAGES_COUNT)
  private Integer maxCarriagesCount;

  public Way() {
  }

  public Way id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Way parkId(Integer parkId) {
    
    this.parkId = parkId;
    return this;
  }

   /**
   * Get parkId
   * @return parkId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getParkId() {
    return parkId;
  }


  public void setParkId(Integer parkId) {
    this.parkId = parkId;
  }


  public Way name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Way locomotives(List<Locomotive> locomotives) {
    
    this.locomotives = locomotives;
    return this;
  }

  public Way addLocomotivesItem(Locomotive locomotivesItem) {
    if (this.locomotives == null) {
      this.locomotives = new ArrayList<>();
    }
    this.locomotives.add(locomotivesItem);
    return this;
  }

   /**
   * Get locomotives
   * @return locomotives
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Locomotive> getLocomotives() {
    return locomotives;
  }


  public void setLocomotives(List<Locomotive> locomotives) {
    this.locomotives = locomotives;
  }


  public Way wagonsCount(Integer wagonsCount) {
    
    this.wagonsCount = wagonsCount;
    return this;
  }

   /**
   * Get wagonsCount
   * @return wagonsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getWagonsCount() {
    return wagonsCount;
  }


  public void setWagonsCount(Integer wagonsCount) {
    this.wagonsCount = wagonsCount;
  }


  public Way wagonsIds(List<Integer> wagonsIds) {
    
    this.wagonsIds = wagonsIds;
    return this;
  }

  public Way addWagonsIdsItem(Integer wagonsIdsItem) {
    if (this.wagonsIds == null) {
      this.wagonsIds = new ArrayList<>();
    }
    this.wagonsIds.add(wagonsIdsItem);
    return this;
  }

   /**
   * Get wagonsIds
   * @return wagonsIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getWagonsIds() {
    return wagonsIds;
  }


  public void setWagonsIds(List<Integer> wagonsIds) {
    this.wagonsIds = wagonsIds;
  }


  public Way maxCarriagesCount(Integer maxCarriagesCount) {
    
    this.maxCarriagesCount = maxCarriagesCount;
    return this;
  }

   /**
   * Get maxCarriagesCount
   * @return maxCarriagesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxCarriagesCount() {
    return maxCarriagesCount;
  }


  public void setMaxCarriagesCount(Integer maxCarriagesCount) {
    this.maxCarriagesCount = maxCarriagesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Way way = (Way) o;
    return Objects.equals(this.id, way.id) &&
        Objects.equals(this.parkId, way.parkId) &&
        Objects.equals(this.name, way.name) &&
        Objects.equals(this.locomotives, way.locomotives) &&
        Objects.equals(this.wagonsCount, way.wagonsCount) &&
        Objects.equals(this.wagonsIds, way.wagonsIds) &&
        Objects.equals(this.maxCarriagesCount, way.maxCarriagesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, parkId, name, locomotives, wagonsCount, wagonsIds, maxCarriagesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Way {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    parkId: ").append(toIndentedString(parkId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    locomotives: ").append(toIndentedString(locomotives)).append("\n");
    sb.append("    wagonsCount: ").append(toIndentedString(wagonsCount)).append("\n");
    sb.append("    wagonsIds: ").append(toIndentedString(wagonsIds)).append("\n");
    sb.append("    maxCarriagesCount: ").append(toIndentedString(maxCarriagesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("parkId");
    openapiFields.add("name");
    openapiFields.add("locomotives");
    openapiFields.add("wagonsCount");
    openapiFields.add("wagonsIds");
    openapiFields.add("maxCarriagesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Way
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Way.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Way is not found in the empty JSON string", Way.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Way.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Way` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("locomotives") != null && !jsonObj.get("locomotives").isJsonNull()) {
        JsonArray jsonArraylocomotives = jsonObj.getAsJsonArray("locomotives");
        if (jsonArraylocomotives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locomotives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locomotives` to be an array in the JSON string but got `%s`", jsonObj.get("locomotives").toString()));
          }

          // validate the optional field `locomotives` (array)
          for (int i = 0; i < jsonArraylocomotives.size(); i++) {
            Locomotive.validateJsonObject(jsonArraylocomotives.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("wagonsIds") != null && !jsonObj.get("wagonsIds").isJsonNull()) && !jsonObj.get("wagonsIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `wagonsIds` to be an array in the JSON string but got `%s`", jsonObj.get("wagonsIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Way.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Way' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Way> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Way.class));

       return (TypeAdapter<T>) new TypeAdapter<Way>() {
           @Override
           public void write(JsonWriter out, Way value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Way read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Way given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Way
  * @throws IOException if the JSON string is invalid with respect to Way
  */
  public static Way fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Way.class);
  }

 /**
  * Convert an instance of Way to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

